/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 10 "MotorInterface.sip"
		#include <motorInterface.h>
#line 12 "./siptrikControltrikControlMotorInterfaceType.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_trikControl_MotorInterface_Type(void *, int);}
static void release_trikControl_MotorInterface_Type(void *sipCppV,int)
{
    delete reinterpret_cast<trikControl::MotorInterface::Type *>(sipCppV);
}


extern "C" {static void assign_trikControl_MotorInterface_Type(void *, SIP_SSIZE_T, const void *);}
static void assign_trikControl_MotorInterface_Type(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<trikControl::MotorInterface::Type *>(sipDst)[sipDstIdx] = *reinterpret_cast<const trikControl::MotorInterface::Type *>(sipSrc);
}


extern "C" {static void *array_trikControl_MotorInterface_Type(SIP_SSIZE_T);}
static void *array_trikControl_MotorInterface_Type(SIP_SSIZE_T sipNrElem)
{
    return new trikControl::MotorInterface::Type[sipNrElem];
}


extern "C" {static void *copy_trikControl_MotorInterface_Type(const void *, SIP_SSIZE_T);}
static void *copy_trikControl_MotorInterface_Type(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new trikControl::MotorInterface::Type(reinterpret_cast<const trikControl::MotorInterface::Type *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_trikControl_MotorInterface_Type(sipSimpleWrapper *);}
static void dealloc_trikControl_MotorInterface_Type(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_MotorInterface_Type(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_trikControl_MotorInterface_Type(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_trikControl_MotorInterface_Type(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    trikControl::MotorInterface::Type *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new trikControl::MotorInterface::Type();

            return sipCpp;
        }
    }

    {
        const trikControl::MotorInterface::Type* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_trikControl_MotorInterface_Type, &a0))
        {
            sipCpp = new trikControl::MotorInterface::Type(*a0);

            return sipCpp;
        }
    }

    return NULL;
}

static sipEnumMemberDef enummembers_trikControl_MotorInterface_Type[] = {
    {sipName_powerMotor, static_cast<int>(trikControl::MotorInterface::Type::powerMotor), 7},
    {sipName_servoMotor, static_cast<int>(trikControl::MotorInterface::Type::servoMotor), 7},
};


pyqt5ClassTypeDef sipTypeDef_trikControl_trikControl_MotorInterface_Type = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_trikControl__MotorInterface__Type,
        {0}
    },
    {
        sipNameNr_Type,
        {5, 255, 0},
        0, 0,
        2, enummembers_trikControl_MotorInterface_Type,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_trikControl_MotorInterface_Type,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_MotorInterface_Type,
    assign_trikControl_MotorInterface_Type,
    array_trikControl_MotorInterface_Type,
    copy_trikControl_MotorInterface_Type,
    release_trikControl_MotorInterface_Type,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
