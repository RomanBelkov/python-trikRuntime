/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 10 "MotorInterface.sip"
		#include <motorInterface.h>
#line 12 "./siptrikControltrikControlMotorInterface.cpp"

#line 26 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16 "./siptrikControltrikControlMotorInterface.cpp"
#line 368 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19 "./siptrikControltrikControlMotorInterface.cpp"
#line 351 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22 "./siptrikControltrikControlMotorInterface.cpp"
#line 29 "/usr/share/sip/PyQt4//QtCore/qobject.sip"
#include <qobject.h>
#line 25 "./siptrikControltrikControlMotorInterface.cpp"
#line 265 "/usr/share/sip/PyQt4//QtCore/qvariant.sip"
#include <qvariant.h>
#line 28 "./siptrikControltrikControlMotorInterface.cpp"
#line 28 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 31 "./siptrikControltrikControlMotorInterface.cpp"
#line 32 "/usr/share/sip/PyQt4//QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34 "./siptrikControltrikControlMotorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37 "./siptrikControltrikControlMotorInterface.cpp"
#line 115 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 40 "./siptrikControltrikControlMotorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qthread.sip"
#include <qthread.h>
#line 43 "./siptrikControltrikControlMotorInterface.cpp"
#line 27 "/usr/share/sip/PyQt4//QtCore/qstring.sip"
#include <qstring.h>
#line 46 "./siptrikControltrikControlMotorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qregexp.sip"
#include <qregexp.h>
#line 49 "./siptrikControltrikControlMotorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 52 "./siptrikControltrikControlMotorInterface.cpp"


extern "C" {static PyObject *meth_trikControl_MotorInterface_minControl(PyObject *, PyObject *);}
static PyObject *meth_trikControl_MotorInterface_minControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::MotorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_MotorInterface, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MotorInterface, sipName_minControl);
                return NULL;
            }

            sipRes = sipCpp->minControl();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MotorInterface, sipName_minControl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_MotorInterface_maxControl(PyObject *, PyObject *);}
static PyObject *meth_trikControl_MotorInterface_maxControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::MotorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_MotorInterface, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MotorInterface, sipName_maxControl);
                return NULL;
            }

            sipRes = sipCpp->maxControl();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MotorInterface, sipName_maxControl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_MotorInterface_setPower(PyObject *, PyObject *);}
static PyObject *meth_trikControl_MotorInterface_setPower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1 = 1;
        trikControl::MotorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_trikControl_MotorInterface, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MotorInterface, sipName_setPower);
                return NULL;
            }

            sipCpp->setPower(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MotorInterface, sipName_setPower, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_MotorInterface_power(PyObject *, PyObject *);}
static PyObject *meth_trikControl_MotorInterface_power(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::MotorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_MotorInterface, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MotorInterface, sipName_power);
                return NULL;
            }

            sipRes = sipCpp->power();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MotorInterface, sipName_power, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_MotorInterface_powerOff(PyObject *, PyObject *);}
static PyObject *meth_trikControl_MotorInterface_powerOff(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::MotorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_MotorInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MotorInterface, sipName_powerOff);
                return NULL;
            }

            sipCpp->powerOff();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MotorInterface, sipName_powerOff, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_MotorInterface(void *, int);}
static void release_trikControl_MotorInterface(void *sipCppV,int)
{
    trikControl::MotorInterface *sipCpp = reinterpret_cast<trikControl::MotorInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_trikControl_MotorInterface(sipSimpleWrapper *);}
static void dealloc_trikControl_MotorInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_MotorInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_trikControl_MotorInterface[] = {{141, 0, 1}};


static PyMethodDef methods_trikControl_MotorInterface[] = {
    {SIP_MLNAME_CAST(sipName_maxControl), meth_trikControl_MotorInterface_maxControl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minControl), meth_trikControl_MotorInterface_minControl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_power), meth_trikControl_MotorInterface_power, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_powerOff), meth_trikControl_MotorInterface_powerOff, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPower), meth_trikControl_MotorInterface_setPower, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_trikControl_MotorInterface[] = {
    {sipName_powerMotor, static_cast<int>(trikControl::MotorInterface::Type::powerMotor), 12},
    {sipName_servoMotor, static_cast<int>(trikControl::MotorInterface::Type::servoMotor), 12},
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_MotorInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_trikControl__MotorInterface,
        {0}
    },
    {
        sipNameNr_MotorInterface,
        {0, 255, 0},
        5, methods_trikControl_MotorInterface,
        2, enummembers_trikControl_MotorInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_trikControl_MotorInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_MotorInterface,
    0,
    0,
    0,
    release_trikControl_MotorInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &trikControl::MotorInterface::staticMetaObject,
    0,
    0
};
