/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 10 "DeviceState.sip"
	#include <deviceState.h>
#line 12 "./siptrikControltrikControlDeviceState.cpp"

#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./siptrikControltrikControlDeviceState.cpp"
#line 6 "DeviceInterface.sip"
		#include <deviceInterface.h>
#line 19 "./siptrikControltrikControlDeviceState.cpp"


extern "C" {static PyObject *meth_trikControl_DeviceState_status(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            trikControl::DeviceInterface::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_trikControl_DeviceInterface_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_status, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_isReady(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_isReady, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_isFailed(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_isFailed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFailed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_isFailed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_fail(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_fail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->fail();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_fail, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_start(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_start, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_ready(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_ready(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->ready();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_ready, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_stop(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_off(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_off(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->off();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_off, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_resetFailure(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_resetFailure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            sipCpp->resetFailure();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_resetFailure, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_DeviceState_deviceName(PyObject *, PyObject *);}
static PyObject *meth_trikControl_DeviceState_deviceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const trikControl::DeviceState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_DeviceState, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->deviceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DeviceState, sipName_deviceName, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_DeviceState(void *, int);}
static void release_trikControl_DeviceState(void *sipCppV,int)
{
    delete reinterpret_cast<trikControl::DeviceState *>(sipCppV);
}


extern "C" {static void dealloc_trikControl_DeviceState(sipSimpleWrapper *);}
static void dealloc_trikControl_DeviceState(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_DeviceState(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_trikControl_DeviceState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_trikControl_DeviceState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    trikControl::DeviceState *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new trikControl::DeviceState(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const trikControl::DeviceState* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_trikControl_DeviceState, &a0))
        {
            sipCpp = new trikControl::DeviceState(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_trikControl_DeviceState[] = {
    {SIP_MLNAME_CAST(sipName_deviceName), meth_trikControl_DeviceState_deviceName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fail), meth_trikControl_DeviceState_fail, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFailed), meth_trikControl_DeviceState_isFailed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isReady), meth_trikControl_DeviceState_isReady, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_off), meth_trikControl_DeviceState_off, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ready), meth_trikControl_DeviceState_ready, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetFailure), meth_trikControl_DeviceState_resetFailure, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_start), meth_trikControl_DeviceState_start, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_status), meth_trikControl_DeviceState_status, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_trikControl_DeviceState_stop, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_DeviceState = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_trikControl__DeviceState,
        {0}
    },
    {
        sipNameNr_DeviceState,
        {0, 255, 0},
        10, methods_trikControl_DeviceState,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_trikControl_DeviceState,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_DeviceState,
    0,
    0,
    0,
    release_trikControl_DeviceState,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
