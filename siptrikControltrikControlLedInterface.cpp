/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 6 "LedInterface.sip"
		#include <ledInterface.h>
#line 12 "./siptrikControltrikControlLedInterface.cpp"

#line 26 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16 "./siptrikControltrikControlLedInterface.cpp"
#line 368 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19 "./siptrikControltrikControlLedInterface.cpp"
#line 351 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22 "./siptrikControltrikControlLedInterface.cpp"
#line 29 "/usr/share/sip/PyQt4//QtCore/qobject.sip"
#include <qobject.h>
#line 25 "./siptrikControltrikControlLedInterface.cpp"
#line 269 "/usr/share/sip/PyQt4//QtCore/qvariant.sip"
#include <qvariant.h>
#line 28 "./siptrikControltrikControlLedInterface.cpp"
#line 28 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 31 "./siptrikControltrikControlLedInterface.cpp"
#line 32 "/usr/share/sip/PyQt4//QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34 "./siptrikControltrikControlLedInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37 "./siptrikControltrikControlLedInterface.cpp"
#line 115 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 40 "./siptrikControltrikControlLedInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qthread.sip"
#include <qthread.h>
#line 43 "./siptrikControltrikControlLedInterface.cpp"
#line 31 "/usr/share/sip/PyQt4//QtCore/qstring.sip"
#include <qstring.h>
#line 46 "./siptrikControltrikControlLedInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtCore/qregexp.sip"
#include <qregexp.h>
#line 49 "./siptrikControltrikControlLedInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 52 "./siptrikControltrikControlLedInterface.cpp"


extern "C" {static PyObject *meth_trikControl_LedInterface_red(PyObject *, PyObject *);}
static PyObject *meth_trikControl_LedInterface_red(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::LedInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_LedInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_LedInterface, sipName_red);
                return NULL;
            }

            sipCpp->red();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LedInterface, sipName_red, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_LedInterface_green(PyObject *, PyObject *);}
static PyObject *meth_trikControl_LedInterface_green(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::LedInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_LedInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_LedInterface, sipName_green);
                return NULL;
            }

            sipCpp->green();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LedInterface, sipName_green, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_LedInterface_orange(PyObject *, PyObject *);}
static PyObject *meth_trikControl_LedInterface_orange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::LedInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_LedInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_LedInterface, sipName_orange);
                return NULL;
            }

            sipCpp->orange();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LedInterface, sipName_orange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_LedInterface_off(PyObject *, PyObject *);}
static PyObject *meth_trikControl_LedInterface_off(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::LedInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_LedInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_LedInterface, sipName_off);
                return NULL;
            }

            sipCpp->off();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LedInterface, sipName_off, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_LedInterface(void *, int);}
static void release_trikControl_LedInterface(void *sipCppV,int)
{
    trikControl::LedInterface *sipCpp = reinterpret_cast<trikControl::LedInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_trikControl_LedInterface(sipSimpleWrapper *);}
static void dealloc_trikControl_LedInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_LedInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_trikControl_LedInterface[] = {{141, 0, 1}};


static PyMethodDef methods_trikControl_LedInterface[] = {
    {SIP_MLNAME_CAST(sipName_green), meth_trikControl_LedInterface_green, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_off), meth_trikControl_LedInterface_off, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_orange), meth_trikControl_LedInterface_orange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_red), meth_trikControl_LedInterface_red, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_LedInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_trikControl__LedInterface,
        {0}
    },
    {
        sipNameNr_LedInterface,
        {0, 255, 0},
        4, methods_trikControl_LedInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_trikControl_LedInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_LedInterface,
    0,
    0,
    0,
    release_trikControl_LedInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &trikControl::LedInterface::staticMetaObject,
    0,
    0
};
