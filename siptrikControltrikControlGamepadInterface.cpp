/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 6 "LedInterface.sip"
		#include <ledInterface.h>
#line 6 "EncoderInterface.sip"
		#include <encoderInterface.h>
#line 9 "GamepadInterface.sip"
		#include <gamepadInterface.h>
#line 16 "./siptrikControltrikControlGamepadInterface.cpp"

#line 26 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 20 "./siptrikControltrikControlGamepadInterface.cpp"
#line 368 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 23 "./siptrikControltrikControlGamepadInterface.cpp"
#line 351 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26 "./siptrikControltrikControlGamepadInterface.cpp"
#line 29 "/usr/share/sip/PyQt4//QtCore/qobject.sip"
#include <qobject.h>
#line 29 "./siptrikControltrikControlGamepadInterface.cpp"
#line 265 "/usr/share/sip/PyQt4//QtCore/qvariant.sip"
#include <qvariant.h>
#line 32 "./siptrikControltrikControlGamepadInterface.cpp"
#line 28 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 35 "./siptrikControltrikControlGamepadInterface.cpp"
#line 32 "/usr/share/sip/PyQt4//QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 38 "./siptrikControltrikControlGamepadInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41 "./siptrikControltrikControlGamepadInterface.cpp"
#line 115 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 44 "./siptrikControltrikControlGamepadInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qthread.sip"
#include <qthread.h>
#line 47 "./siptrikControltrikControlGamepadInterface.cpp"
#line 27 "/usr/share/sip/PyQt4//QtCore/qstring.sip"
#include <qstring.h>
#line 50 "./siptrikControltrikControlGamepadInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qregexp.sip"
#include <qregexp.h>
#line 53 "./siptrikControltrikControlGamepadInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 56 "./siptrikControltrikControlGamepadInterface.cpp"


extern "C" {static PyObject *meth_trikControl_GamepadInterface_reset(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_reset);
                return NULL;
            }

            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_buttonWasPressed(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_buttonWasPressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_buttonWasPressed);
                return NULL;
            }

            sipRes = sipCpp->buttonWasPressed(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_buttonWasPressed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_buttonIsPressed(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_buttonIsPressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_buttonIsPressed);
                return NULL;
            }

            sipRes = sipCpp->buttonIsPressed(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_buttonIsPressed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_isPadPressed(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_isPadPressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_isPadPressed);
                return NULL;
            }

            sipRes = sipCpp->isPadPressed(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_isPadPressed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_padX(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_padX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_padX);
                return NULL;
            }

            sipRes = sipCpp->padX(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_padX, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_padY(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_padY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_padY);
                return NULL;
            }

            sipRes = sipCpp->padY(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_padY, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_wheel(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_wheel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_wheel);
                return NULL;
            }

            sipRes = sipCpp->wheel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_wheel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikControl_GamepadInterface_isConnected(PyObject *, PyObject *);}
static PyObject *meth_trikControl_GamepadInterface_isConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::GamepadInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_GamepadInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GamepadInterface, sipName_isConnected);
                return NULL;
            }

            sipRes = sipCpp->isConnected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GamepadInterface, sipName_isConnected, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_GamepadInterface(void *, int);}
static void release_trikControl_GamepadInterface(void *sipCppV,int)
{
    trikControl::GamepadInterface *sipCpp = reinterpret_cast<trikControl::GamepadInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_trikControl_GamepadInterface(sipSimpleWrapper *);}
static void dealloc_trikControl_GamepadInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_GamepadInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_trikControl_GamepadInterface[] = {{141, 0, 1}};


static PyMethodDef methods_trikControl_GamepadInterface[] = {
    {SIP_MLNAME_CAST(sipName_buttonIsPressed), meth_trikControl_GamepadInterface_buttonIsPressed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buttonWasPressed), meth_trikControl_GamepadInterface_buttonWasPressed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isConnected), meth_trikControl_GamepadInterface_isConnected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isPadPressed), meth_trikControl_GamepadInterface_isPadPressed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_padX), meth_trikControl_GamepadInterface_padX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_padY), meth_trikControl_GamepadInterface_padY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_trikControl_GamepadInterface_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheel), meth_trikControl_GamepadInterface_wheel, METH_VARARGS, NULL}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_trikControl_GamepadInterface[] = {
    {"disconnect()", 0, 0, 0},
    {"connected()", 0, 0, 0},
    {"button(int,int)", 0, 0, 0},
    {"pad(int,int,int)", 0, 0, 0},
    {"wheelEvent(int)", 0, 0, 0},
    {"padUp(int)", 0, 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_GamepadInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_trikControl__GamepadInterface,
        {0}
    },
    {
        sipNameNr_GamepadInterface,
        {0, 255, 0},
        8, methods_trikControl_GamepadInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_trikControl_GamepadInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_GamepadInterface,
    0,
    0,
    0,
    release_trikControl_GamepadInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &trikControl::GamepadInterface::staticMetaObject,
    0,
    signals_trikControl_GamepadInterface,
};
