/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 6 "TimeVal.sip"
		#include <timeVal.h>
#line 12 "./siptrikControltrikKernelTimeVal.cpp"



extern "C" {static PyObject *meth_trikKernel_TimeVal_packedUInt32(PyObject *, PyObject *);}
static PyObject *meth_trikKernel_TimeVal_packedUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const trikKernel::TimeVal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikKernel_TimeVal, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->packedUInt32();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TimeVal, sipName_packedUInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikKernel_TimeVal_fromPackedUInt32(PyObject *, PyObject *);}
static PyObject *meth_trikKernel_TimeVal_fromPackedUInt32(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            trikKernel::TimeVal*sipRes;

            sipRes = new trikKernel::TimeVal(trikKernel::TimeVal::fromPackedUInt32(a0));

            return sipConvertFromNewType(sipRes,sipType_trikKernel_TimeVal,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TimeVal, sipName_fromPackedUInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikKernel_TimeVal_timeInterval(PyObject *, PyObject *);}
static PyObject *meth_trikKernel_TimeVal_timeInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            int sipRes;

            sipRes = trikKernel::TimeVal::timeInterval(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TimeVal, sipName_timeInterval, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikKernel_TimeVal(void *, int);}
static void release_trikKernel_TimeVal(void *sipCppV,int)
{
    delete reinterpret_cast<trikKernel::TimeVal *>(sipCppV);
}


extern "C" {static void dealloc_trikKernel_TimeVal(sipSimpleWrapper *);}
static void dealloc_trikKernel_TimeVal(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikKernel_TimeVal(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_trikKernel_TimeVal(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_trikKernel_TimeVal(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    trikKernel::TimeVal *sipCpp = 0;

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new trikKernel::TimeVal(a0,a1);

            return sipCpp;
        }
    }

    {
        const trikKernel::TimeVal* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_trikKernel_TimeVal, &a0))
        {
            sipCpp = new trikKernel::TimeVal(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_trikKernel_TimeVal[] = {
    {SIP_MLNAME_CAST(sipName_fromPackedUInt32), meth_trikKernel_TimeVal_fromPackedUInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_packedUInt32), meth_trikKernel_TimeVal_packedUInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timeInterval), meth_trikKernel_TimeVal_timeInterval, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikKernel_TimeVal = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_trikKernel__TimeVal,
        {0}
    },
    {
        sipNameNr_TimeVal,
        {17, 255, 0},
        3, methods_trikKernel_TimeVal,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_trikKernel_TimeVal,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikKernel_TimeVal,
    0,
    0,
    0,
    release_trikKernel_TimeVal,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
