/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 16 "MailboxInterface.sip"
		#include <mailboxInterface.h>
#line 12 "./siptrikControltrikNetworkMailboxInterface.cpp"

#line 31 "/usr/share/sip/PyQt4//QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 19 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 368 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 351 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 29 "/usr/share/sip/PyQt4//QtCore/qobject.sip"
#include <qobject.h>
#line 31 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 269 "/usr/share/sip/PyQt4//QtCore/qvariant.sip"
#include <qvariant.h>
#line 34 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 28 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 37 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 32 "/usr/share/sip/PyQt4//QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 40 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 115 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 43 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qthread.sip"
#include <qthread.h>
#line 46 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtCore/qregexp.sip"
#include <qregexp.h>
#line 49 "./siptrikControltrikNetworkMailboxInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 52 "./siptrikControltrikNetworkMailboxInterface.cpp"


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_isConnected(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_isConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_isConnected);
                return NULL;
            }

            sipRes = sipCpp->isConnected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_isConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_setHullNumber(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_setHullNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_setHullNumber);
                return NULL;
            }

            sipCpp->setHullNumber(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_setHullNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_serverIp(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_serverIp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            QHostAddress*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_serverIp);
                return NULL;
            }

            sipRes = new QHostAddress(sipCpp->serverIp());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_serverIp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_myIp(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_myIp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            QHostAddress*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_myIp);
                return NULL;
            }

            sipRes = new QHostAddress(sipCpp->myIp());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_myIp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_clearQueue(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_clearQueue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_clearQueue);
                return NULL;
            }

            sipCpp->clearQueue();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_clearQueue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_stopWaiting(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_stopWaiting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_stopWaiting);
                return NULL;
            }

            sipCpp->stopWaiting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_stopWaiting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_isEnabled);
                return NULL;
            }

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_isEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_connect(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_connect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_connect);
                return NULL;
            }

            sipCpp->connect(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_connect);
                return NULL;
            }

            sipCpp->connect(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_connect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_send(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_send(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_send);
                return NULL;
            }

            sipCpp->send(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_send);
                return NULL;
            }

            sipCpp->send(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_send, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_hasMessages(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_hasMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_hasMessages);
                return NULL;
            }

            sipRes = sipCpp->hasMessages();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_hasMessages, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_receive(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_receive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0 = 1;
        trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp, &a0))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_receive);
                return NULL;
            }

            sipRes = new QString(sipCpp->receive(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_receive, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_trikNetwork_MailboxInterface_myHullNumber(PyObject *, PyObject *);}
static PyObject *meth_trikNetwork_MailboxInterface_myHullNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikNetwork::MailboxInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikNetwork_MailboxInterface, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_MailboxInterface, sipName_myHullNumber);
                return NULL;
            }

            sipRes = sipCpp->myHullNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MailboxInterface, sipName_myHullNumber, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikNetwork_MailboxInterface(void *, int);}
static void release_trikNetwork_MailboxInterface(void *sipCppV,int)
{
    trikNetwork::MailboxInterface *sipCpp = reinterpret_cast<trikNetwork::MailboxInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_trikNetwork_MailboxInterface(sipSimpleWrapper *);}
static void dealloc_trikNetwork_MailboxInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikNetwork_MailboxInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_trikNetwork_MailboxInterface[] = {{141, 0, 1}};


static PyMethodDef methods_trikNetwork_MailboxInterface[] = {
    {SIP_MLNAME_CAST(sipName_clearQueue), meth_trikNetwork_MailboxInterface_clearQueue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connect), meth_trikNetwork_MailboxInterface_connect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasMessages), meth_trikNetwork_MailboxInterface_hasMessages, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isConnected), meth_trikNetwork_MailboxInterface_isConnected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_trikNetwork_MailboxInterface_isEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_myHullNumber), meth_trikNetwork_MailboxInterface_myHullNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_myIp), meth_trikNetwork_MailboxInterface_myIp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receive), meth_trikNetwork_MailboxInterface_receive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_send), meth_trikNetwork_MailboxInterface_send, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serverIp), meth_trikNetwork_MailboxInterface_serverIp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHullNumber), meth_trikNetwork_MailboxInterface_setHullNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stopWaiting), meth_trikNetwork_MailboxInterface_stopWaiting, METH_VARARGS, NULL}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_trikNetwork_MailboxInterface[] = {
    {"connectionStatusChanged(bool)", 0, 0, 0},
    {"newMessage(int,QString)", 0, 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikNetwork_MailboxInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_trikNetwork__MailboxInterface,
        {0}
    },
    {
        sipNameNr_MailboxInterface,
        {18, 255, 0},
        12, methods_trikNetwork_MailboxInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_trikNetwork_MailboxInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikNetwork_MailboxInterface,
    0,
    0,
    0,
    release_trikNetwork_MailboxInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &trikNetwork::MailboxInterface::staticMetaObject,
    0,
    signals_trikNetwork_MailboxInterface,
};
