/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 6 "LedInterface.sip"
		#include <ledInterface.h>
#line 11 "VectorSensorInterface.sip"
		#include <vectorSensorInterface.h>
#line 14 "./siptrikControltrikControlVectorSensorInterface.cpp"

#line 101 "/usr/share/sip/PyQt4//QtCore/qvector.sip"
#include <qvector.h>
#line 18 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 7 "TimeVal.sip"
		#include <timeVal.h>
#line 21 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 24 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 368 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 27 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 351 "/usr/share/sip/PyQt4//QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 30 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 29 "/usr/share/sip/PyQt4//QtCore/qobject.sip"
#include <qobject.h>
#line 33 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 269 "/usr/share/sip/PyQt4//QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 28 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 39 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 32 "/usr/share/sip/PyQt4//QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 115 "/usr/share/sip/PyQt4//QtCore/qlist.sip"
#include <qlist.h>
#line 48 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qthread.sip"
#include <qthread.h>
#line 51 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 31 "/usr/share/sip/PyQt4//QtCore/qstring.sip"
#include <qstring.h>
#line 54 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 30 "/usr/share/sip/PyQt4//QtCore/qregexp.sip"
#include <qregexp.h>
#line 57 "./siptrikControltrikControlVectorSensorInterface.cpp"
#line 26 "/usr/share/sip/PyQt4//QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 60 "./siptrikControltrikControlVectorSensorInterface.cpp"


extern "C" {static PyObject *meth_trikControl_VectorSensorInterface_read(PyObject *, PyObject *);}
static PyObject *meth_trikControl_VectorSensorInterface_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const trikControl::VectorSensorInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_trikControl_VectorSensorInterface, &sipCpp))
        {
            QVector<int>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_VectorSensorInterface, sipName_read);
                return NULL;
            }

            sipRes = new QVector<int>(sipCpp->read());

            return sipConvertFromNewType(sipRes,sipType_QVector_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorSensorInterface, sipName_read, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_VectorSensorInterface(void *, int);}
static void release_trikControl_VectorSensorInterface(void *sipCppV,int)
{
    trikControl::VectorSensorInterface *sipCpp = reinterpret_cast<trikControl::VectorSensorInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_trikControl_VectorSensorInterface(sipSimpleWrapper *);}
static void dealloc_trikControl_VectorSensorInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_VectorSensorInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_trikControl_VectorSensorInterface[] = {{141, 0, 1}};


static PyMethodDef methods_trikControl_VectorSensorInterface[] = {
    {SIP_MLNAME_CAST(sipName_read), meth_trikControl_VectorSensorInterface_read, METH_VARARGS, NULL}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_trikControl_VectorSensorInterface[] = {
    {"newData(QVector<int>,trikKernel::TimeVal)", 0, 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_VectorSensorInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_trikControl__VectorSensorInterface,
        {0}
    },
    {
        sipNameNr_VectorSensorInterface,
        {0, 255, 0},
        1, methods_trikControl_VectorSensorInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_trikControl_VectorSensorInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_VectorSensorInterface,
    0,
    0,
    0,
    release_trikControl_VectorSensorInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &trikControl::VectorSensorInterface::staticMetaObject,
    0,
    signals_trikControl_VectorSensorInterface,
};
