/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPItrikControl.h"

#line 20 "BrickFactory.sip"
		#include <brickFactory.h>
#line 12 "./siptrikControltrikControlBrickFactory.cpp"

#line 12 "BrickInterface.sip"
		#include <brickInterface.h>
#line 16 "./siptrikControltrikControlBrickFactory.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 19 "./siptrikControltrikControlBrickFactory.cpp"


extern "C" {static PyObject *meth_trikControl_BrickFactory_create(PyObject *, PyObject *);}
static PyObject *meth_trikControl_BrickFactory_create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            trikControl::BrickInterface*sipRes;

            sipRes = trikControl::BrickFactory::create(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_trikControl_BrickInterface,NULL);
        }
    }

    {
        const QString& a0def = ".";
        const QString* a0 = &a0def;
        int a0State = 0;
        const QString& a1def = ".";
        const QString* a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            trikControl::BrickInterface*sipRes;

            sipRes = trikControl::BrickFactory::create(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_trikControl_BrickInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BrickFactory, sipName_create, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_trikControl_BrickFactory(void *, int);}
static void release_trikControl_BrickFactory(void *sipCppV,int)
{
    delete reinterpret_cast<trikControl::BrickFactory *>(sipCppV);
}


extern "C" {static void assign_trikControl_BrickFactory(void *, SIP_SSIZE_T, const void *);}
static void assign_trikControl_BrickFactory(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<trikControl::BrickFactory *>(sipDst)[sipDstIdx] = *reinterpret_cast<const trikControl::BrickFactory *>(sipSrc);
}


extern "C" {static void *array_trikControl_BrickFactory(SIP_SSIZE_T);}
static void *array_trikControl_BrickFactory(SIP_SSIZE_T sipNrElem)
{
    return new trikControl::BrickFactory[sipNrElem];
}


extern "C" {static void *copy_trikControl_BrickFactory(const void *, SIP_SSIZE_T);}
static void *copy_trikControl_BrickFactory(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new trikControl::BrickFactory(reinterpret_cast<const trikControl::BrickFactory *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_trikControl_BrickFactory(sipSimpleWrapper *);}
static void dealloc_trikControl_BrickFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_trikControl_BrickFactory(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_trikControl_BrickFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_trikControl_BrickFactory(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    trikControl::BrickFactory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new trikControl::BrickFactory();

            return sipCpp;
        }
    }

    {
        const trikControl::BrickFactory* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_trikControl_BrickFactory, &a0))
        {
            sipCpp = new trikControl::BrickFactory(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_trikControl_BrickFactory[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_trikControl_BrickFactory_create, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_trikControl_trikControl_BrickFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_trikControl__BrickFactory,
        {0}
    },
    {
        sipNameNr_BrickFactory,
        {0, 255, 0},
        1, methods_trikControl_BrickFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_trikControl_BrickFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_trikControl_BrickFactory,
    assign_trikControl_BrickFactory,
    array_trikControl_BrickFactory,
    copy_trikControl_BrickFactory,
    release_trikControl_BrickFactory,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
